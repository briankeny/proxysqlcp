- name: Setup Proxysql
  hosts: sharedHosting
  become: true
  gather_facts: false
  tasks:
    - name: Install Proxysql
      raw: |
        set -e
        echo "Starting ProxySQL configuration..."
        # Check if the script is run as root
        if [ "$(id -u)" -ne 0 ]; then
            echo "This script must be run as root. Please run it with sudo."
            exit 1
        fi

        echo "Checking if ProxySQL is installed..."
        # Check if ProxySQL is installed
        if ! command -v proxysql &> /dev/null
        then
            echo "ProxySQL could not be found. Please install it first."
            PROXY_installed=0
        else
            PROXY_installed=1
        fi

        # Check if ProxySQL is installed
        if ! command -v proxysql >/dev/null 2>&1; then
            echo "ProxySQL is not installed. Installing..."
            # Write the repo file cleanly (no leading whitespace!)
            sudo tee /etc/yum.repos.d/proxysql.repo > /dev/null <<EOF
        [proxysql_repo]
        name=ProxySQL repository
        baseurl=https://repo.proxysql.com/ProxySQL/proxysql-2.7.x/almalinux/\$releasever
        gpgcheck=1
        gpgkey=https://repo.proxysql.com/ProxySQL/proxysql-2.7.x/repo_pub_key
        EOF
            # Install ProxySQL
            sudo yum install -y proxysql
        else
            echo "ProxySQL is already installed."
        fi


        # Check if ProxySQL is running
        if ! systemctl is-active --quiet proxysql; then
            echo "ProxySQL is not running. Starting ProxySQL..."
            sudo systemctl start proxysql
        fi

        # Check if ProxySQL is enabled to start on boot
        if ! systemctl is-enabled --quiet proxysql; then
            echo "ProxySQL is not enabled to start on boot. Enabling ProxySQL..."
            sudo systemctl enable proxysql
        fi
      args:
        executable: /bin/bash

    - name: Create Users for Proxysql
      raw: |
        echo "Creating MySQL users for ProxySQL..."
        sudo mysql <<EOF
        CREATE USER IF NOT EXISTS 'monitor'@'%' IDENTIFIED BY 'monitor';
        GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'monitor'@'%';
        FLUSH PRIVILEGES;
        CREATE USER IF NOT EXISTS 'stnduser'@'%' IDENTIFIED BY 'stnduser';
        GRANT ALL PRIVILEGES ON *.* TO 'stnduser'@'%';
        FLUSH PRIVILEGES;
        EOF
      args:
        executable: /bin/bash

    - name: Register Cpanel Hook
      raw: |
        set -e
        echo "Adding cPanel ProxySQL hook..."
        [ "$(id -u)" -ne 0 ] && { echo "Run as root: sudo $0"; exit 1; }

        echo "Checking Perl modules..."
        for module in DBI JSON; do
            /usr/local/cpanel/3rdparty/bin/perl -M$module -e 1 &>/dev/null || {
                echo "Installing $module..."
                /usr/local/cpanel/3rdparty/bin/perl -MCPAN -e "CPAN::Shell->install(\"$module\")"
            }
        done

        echo "Creating module directory..."
        mkdir -p /usr/local/cpanel/Cpanel || exit 1

        echo "Enabling hooks..."
        echo "enabled" > /var/cpanel/hooks/state

        echo "Writing ProxySQL hook module..."
        cat <<'EOF' > /usr/local/cpanel/Cpanel/ProxysqlHook.pm
        #!/usr/bin/perl

        package Cpanel::ProxysqlHook;

        use strict;
        use warnings;
        use Cpanel::Logger;
        use DBI;

        # ProxySQL Configuration
        my $proxysql_admin_host = '127.0.0.1';
        my $proxysql_admin_port = '6032';
        my $proxysql_admin_user = 'admin';
        my $proxysql_admin_pass = 'admin';
        my $proxysql_admin_db   = 'admin';
        my $proxysql_default_hostgroup = 1;

        # MySQL Configuration
        my $mysql_host = '127.0.0.1';
        my $mysql_port = '3307';
        my $mysql_user = 'stnduser';
        my $mysql_pass = 'stnduser'; 

        my $logger = Cpanel::Logger->new();
        my $proxysql_dbh;  # Persistent ProxySQL connection
        my $mysql_dbh;     # Persistent MySQL connection

        # Initialize ProxySQL database connection with reconnect
        sub init_proxysql_db {
            return if $proxysql_dbh && $proxysql_dbh->ping;
            
            my $dsn = "DBI:mysql:database=$proxysql_admin_db;host=$proxysql_admin_host;port=$proxysql_admin_port";
            $proxysql_dbh = DBI->connect(
                $dsn, 
                $proxysql_admin_user, 
                $proxysql_admin_pass,
                {
                    RaiseError          => 0,
                    AutoCommit          => 1,
                    mysql_auto_reconnect => 1,
                    PrintError          => 0
                }
            ) or $logger->warn("ProxySQL connection failed: $DBI::errstr");
        }

        # Initialize MySQL database connection with reconnect
        sub init_mysql_db {
            return if $mysql_dbh && $mysql_dbh->ping;
            
            my $dsn = "DBI:mysql:database=mysql;host=$mysql_host;port=$mysql_port";
            $mysql_dbh = DBI->connect(
                $dsn, 
                $mysql_user, 
                $mysql_pass,
                {
                    RaiseError          => 0,
                    AutoCommit          => 1,
                    mysql_auto_reconnect => 1,
                    PrintError          => 0
                }
            ) or $logger->warn("MySQL connection failed: $DBI::errstr");
        }

        sub describe {
            return [
                {
                    'category' => 'Whostmgr',
                    'event'    => 'Accounts::Create',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::create_proxysql_default_user',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Whostmgr',
                    'event'    => 'Accounts::Remove',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::remove_proxysql_default_user',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'UAPI::Mysql::create_user',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::create_proxysql_user',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'Api2::MySQLFE::createdbuser',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::create_proxysql_user2',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'UAPI::Mysql::delete_user',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::delete_proxysql_user',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'Api2::MySQLFE::deletedbuser',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::delete_proxysql_user2',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'UAPI::Mysql::set_privileges_on_database',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::set_default_schema',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'Api2::MySQLFE::setdbuserprivileges',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::set_default_schema2',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'UAPI::Mysql::rename_user',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::rename_proxysql_user',
                    'exectype' => 'module',
                },
                {
                    'category' => 'Cpanel',
                    'event'    => 'UAPI::Mysql::set_password',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxysqlHook::set_mysql_user_password',
                    'exectype' => 'module',
                }
            ];
        }

        # Universal sync function
        sub _sync_proxysql_user {
            my ($user, $pass) = @_;
            init_proxysql_db();
            
            eval {
                my $exists = $proxysql_dbh->selectrow_array(
                    "SELECT username FROM mysql_users WHERE username = ?",
                    undef, $user
                );
                
                if ($exists) {
                    $proxysql_dbh->do(
                        "UPDATE mysql_users SET password=? WHERE username=?",
                        undef, $pass, $user
                    );
                    $logger->info("Updated ProxySQL password for $user");
                } else {
                    $proxysql_dbh->do(
                        "INSERT INTO mysql_users (username,password,default_hostgroup) VALUES (?,?,?)",
                        undef, $user, $pass, $proxysql_default_hostgroup
                    );
                    $logger->info("Added $user to ProxySQL");
                }
                
                load_mysql_users_table();
            };
            
            $logger->error("ProxySQL sync failed for $user: $@") if $@;
        }

        # Password update handler
        sub set_mysql_user_password {
            my ($context, $data) = @_;
            init_proxysql_db();
            
            my $user = $data->{args}{user} || $data->{args}{dbuser};
            my $pass = $data->{args}{password};
            
            return unless $user && $pass;
            
            $logger->info("Password change detected for $user");
            _sync_proxysql_user($user, $pass);
        }

        # User creation handlers
        sub create_proxysql_user {
            my ($context, $data) = @_;
            init_proxysql_db();
            _sync_proxysql_user($data->{args}{name}, $data->{args}{password});
        }

        sub create_proxysql_user2 {
            my ($context, $data) = @_;
            init_proxysql_db();
            _sync_proxysql_user($data->{args}{dbuser}, $data->{args}{password});
        }

        # User deletion handlers
        sub delete_proxysql_user {
            my ($context, $data) = @_;
            init_proxysql_db();
            my $user = $data->{args}{name} or return;
            
            eval {
                $proxysql_dbh->do("DELETE FROM mysql_users WHERE username=?", undef, $user);
                $logger->info("Deleted ProxySQL user $user");
                load_mysql_users_table();
            };
            $logger->error("Delete failed for $user: $@") if $@;
        }

        sub delete_proxysql_user2 {
            my ($context, $data) = @_;
            init_proxysql_db();
            my $user = $data->{args}{dbuser} or return;
            
            eval {
                $proxysql_dbh->do("DELETE FROM mysql_users WHERE username=?", undef, $user);
                $logger->info("Deleted ProxySQL user $user");
                load_mysql_users_table();
            };
            $logger->error("Delete failed for $user: $@") if $@;
        }

        # Schema update handlers
        sub set_default_schema {
            my ($context, $data) = @_;
            init_proxysql_db();
            
            my $user = $data->{args}{user};
            my $dbname = $data->{args}{database};
            
            eval {
                $proxysql_dbh->do(
                    "UPDATE mysql_users SET default_schema=? WHERE username=?",
                    undef, $dbname, $user
                );
                load_mysql_users_table();
            };
            $logger->error("Schema update failed for $user: $@") if $@;
        }

        sub set_default_schema2 {
            my ($context, $data) = @_;
            init_proxysql_db();
            
            my $user = $data->{args}{dbuser};
            my $dbname = $data->{args}{db};
            
            eval {
                $proxysql_dbh->do(
                    "UPDATE mysql_users SET default_schema=? WHERE username=?",
                    undef, $dbname, $user
                );
                load_mysql_users_table();
            };
            $logger->error("Schema update failed for $user: $@") if $@;
        }

        # User rename handler
        sub rename_proxysql_user {
            my ($context, $data) = @_;
            init_proxysql_db();
            
            my $old = $data->{args}{oldname};
            my $new = $data->{args}{newname};
            
            eval {
                $proxysql_dbh->do(
                    "UPDATE mysql_users SET username=? WHERE username=?",
                    undef, $new, $old
                );
                load_mysql_users_table();
            };
            $logger->error("Rename failed $old -> $new: $@") if $@;
        }

        # Account creation/removal handlers
        sub create_proxysql_default_user {
            my ($context, $data) = @_;
            init_proxysql_db();
            _sync_proxysql_user($data->{user}, $data->{pass});
        }

        sub remove_proxysql_default_user {
            my ($context, $data) = @_;
            init_proxysql_db();
            my $user = $data->{user} or return;
            
            eval {
                $proxysql_dbh->do("DELETE FROM mysql_users WHERE username=?", undef, $user);
                load_mysql_users_table();
            };
            $logger->error("Account removal failed for $user: $@") if $@;
        }

        # Runtime/Disk sync
        sub load_mysql_users_table {
            init_proxysql_db();
            
            eval {
                $proxysql_dbh->do("LOAD MYSQL USERS TO RUNTIME");
                $proxysql_dbh->do("SAVE MYSQL USERS TO DISK");
            };
            $logger->error("Runtime/Disk sync failed: $@") if $@;
        }

        1;
        EOF

        echo "Validating syntax..."
        /usr/local/cpanel/3rdparty/bin/perl -c /usr/local/cpanel/Cpanel/ProxysqlHook.pm || exit 1

        echo "Registering hook..."
        /usr/local/cpanel/bin/manage_hooks add module Cpanel::ProxysqlHook

        echo "Verifying..."
        /usr/local/cpanel/bin/manage_hooks list | grep -q ProxysqlHook && \
        echo "Success!" || echo "Installation failed!"

      args:
        executable: /bin/bash

    # - name: Sync Users To Proxysql
    #   raw: |
    #     set -e
    #     echo "User Sync started..."
    #     # Check if the script is run as root
    #     if [ "$(id -u)" -ne 0 ]; then
    #         echo "This script must be run as root. Please run it with sudo."
    #         exit 1
    #     fi
    #     echo "Starting full user synchronization"          
    #     echo "Configuring Root"
    #     # Extract user 
    #     MYSQL_USER=$(sudo sed -n 's/^[[:space:]]*user[[:space:]]*=[[:space:]]*"\{0,1\}\([^"]*\)"\{0,1\}[[:space:]]*$/\1/p' /root/.my.cnf)
    #     MYSQL_PASSWORD=$(sudo sed -n 's/^[[:space:]]*password[[:space:]]*=[[:space:]]*"\([^"]*\)"[[:space:]]*$/\1/p' /root/.my.cnf)
    #     set +e
    #     # Add root to proxysql
    #     mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt='Admin> ' <<EOF >/dev/null 2>&1
    #     INSERT INTO mysql_users(username,password,default_hostgroup) VALUES ('$MYSQL_USER','$MYSQL_PASSWORD',1);
    #     SAVE MYSQL USERS TO DISK;
    #     LOAD MYSQL USERS TO RUNTIME;
    #     EOF
    #     echo "Root is now on cpanel"       
    #     # Get all MySQL users with their default schema
    #     USERS_QUERY="SELECT u.user, u.host, u.authentication_string, 
    #                 IF(u.plugin='mysql_native_password',1,0) as active,
    #                 MAX(IF(d.Select_priv = 'Y', 1, 0)) as use_ssl,
    #                 MIN(d.Db) as default_schema
    #                 FROM mysql.user u
    #                 LEFT JOIN mysql.db d ON u.user = d.user AND u.host = d.host
    #                 WHERE u.user != '' AND u.user NOT IN ('root', 'mysql.sys', 'mysql.session')
    #                 GROUP BY u.user, u.host;"
    #     # Temporary file to store user data
    #     USERS_FILE=$(mktemp)
    #     echo "Retrieving users from MySQL..."
    #     # Get users from MySQL and save to temp file
    #     sudo mysql -ANe "$USERS_QUERY" > "$USERS_FILE"
    #     if [ $? -ne 0 ]; then
    #         echo "Error: Failed to retrieve users from MySQL"
    #         rm -f "$USERS_FILE"
    #         exit 1
    #     fi
    #     echo "Users retrieved from MySQL and saved to $USERS_FILE"
    #     echo "Saving mysql users to proxysql..."
    #     # Add users from temp file to ProxySQL
    #     while IFS=$'\t' read -r user host password active use_ssl default_schema; do
    #         # Default to hostgroup 1
    #         default_hostgroup=1
    #         host=${host:-"%"}
    #         user=${user:-"stnduser"}
    #         password=${password:-""}
    #         active=${active:-1}
    #         use_ssl=0
    #         ssl_en=${use_ssl:-0}
    #         default_schema=${default_schema:-"NULL"} # Use NULL if no schema is found
    #         if [[ "$default_schema" != "NULL" ]]; then
    #             default_schema=${default_schema//\\}
    #         fi
    #         # Insert user into ProxySQL
    #         INSERT_QUERY="INSERT INTO mysql_users (username, password, active, default_hostgroup, default_schema, schema_locked, transaction_persistent, fast_forward, backend, frontend, max_connections, use_ssl) VALUES ('$user', '$password', $active, $default_hostgroup, '$default_schema', 0, 0, 0, 1, 1, 1000, $use_ssl)"
    #         # Execute the insert query
    #         mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt='Admin> ' -e "$INSERT_QUERY" 2>/dev/null || true

    #         # Successfully continue the loop regardless of command success/failure
    #         echo "Processed user $user@$host in ProxySQL"
    #     done < "$USERS_FILE"
    #     echo "Saving mysql users to disk and runtime..."
    #     # Apply changes to runtime and save to disk
    #     mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt='Admin> ' <<EOF 
    #     LOAD MYSQL USERS TO RUNTIME;
    #     SAVE MYSQL USERS TO DISK;
    #     EOF
    #     # Clean up
    #     rm -f "$USERS_FILE"
    #     echo "Full user synchronization completed"
    #   args:
    #     executable: /bin/bash

    - name: Load Caching Rules to Proxysql
      raw: |
        set -e
        echo "Loading Caching Rules to ProxySQL..."
        mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt='Admin> ' <<EOF
        -- Connection handling
        -- Reduce ssl overhead
        SET mysql-have_ssl = 0;
        -- multiplexing true
        SET mysql-multiplexing = 1;
        -- Total of 2048 connections
        SET mysql-max_connections = 2048;
        -- 1hr max before shunning idle sessions
        SET mysql-session_idle_ms = 3600000;
        -- Idle connections connections ttl to 15 minutes
        SET mysql-wait_timeout = 900000;
        -- Optimize connection max age to 60 minutes
        SET mysql-connection_max_age_ms = 3600000;
        -- Lower timeout for faster I/O polling: 1s
        SET mysql-poll_timeout = 1000;
        -- Disconnect early when server is unreachable:- 5s
        SET mysql-connect_timeout_server = 5000;
        -- 10s proxysql is unreachable
        SET mysql-connect_timeout_client=10000;
        --  No long running sess past 30 min
        SET mysql-max_transaction_time = 1800000;
        -- Thread tuning
        -- Adjust worker threads to 12. 12 cores equals 24 threads
        SET mysql-threads = 12;
        -- Query digests and caching
        -- Default Cache TTl to 10 seconds
        SET mysql-query_cache_ttl = 10000;
        -- Max cache to 1G
        SET mysql-query_cache_size_MB = 1048;
        -- SET mysql-query_cache_stickiness = 0;
        -- SET mysql-query_digests_max = 10000;
        -- SET mysql-query_digests_enable = true;
        -- SET mysql-query_digests_sample_rate = 100;
        -- SET mysql-query_digests_lifetime_ms = 60000;
        -- Enable storing empty results
        SET mysql-query_cache_stores_empty_result=1;
        -- Load throttling
        -- SET mysql-throttle_connections_per_sec_to_hostgroup = 1000;
        -- Failover and monitoring
        -- Adjust max latency to avoid laggy replicas
        SET mysql-default_max_latency_ms = 1000;
        -- Disable monitoring overhead
        SET mysql-monitor_enabled = 0;
        -- If monitoring is enabled, set the interval to 4s
        SET mysql-monitor_connect_interval = 4000;
        SET mysql-ping_interval_server_msec = 2000;
        -- Save changes
        LOAD MYSQL VARIABLES TO RUNTIME;
        SAVE MYSQL VARIABLES TO DISK;
        EOF
        echo "Caching rules loading complete..."
      args:
        executable: /bin/bash

    - name: Switch ProxySQL Port and Socket
      raw: |
        set -e
        MY_CNF="/etc/my.cnf"
        SOCKET_VAL="/var/lib/mysql/mysql2.sock"
        PORT_VAL="3307"
        BIND_VAL="127.0.0.1"

        # Check mysql version
        echo "Checking MySQL version..."
        MYSQL_VERSION=$(sudo mysql -Nse "SELECT VERSION();" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

        echo "Configuring MySQL configuration in $MY_CNF..."
        # Ensure [mysqld] section exists
        if ! grep -q "^\[mysqld\]" "$MY_CNF"; then
            echo "Adding [mysqld] section..."
            echo -e "\n[mysqld]" | sudo tee -a "$MY_CNF"
        fi

        # Function to replace or append a setting in [mysqld]
        update_or_append() {
            local key="$1"
            local value="$2"
            if grep -q "^\s*$key\s*=" "$MY_CNF"; then
                echo "Updating $key..."
                sudo sed -i "s|^\s*$key\s*=.*|$key=$value|" "$MY_CNF"
            else
                echo "Adding $key..."
                # Append below [mysqld] section
                sudo awk -v key="$key" -v val="$value" '
                    BEGIN {added=0}
                    /^\[mysqld\]/ {
                        print
                        print key"="val
                        added=1
                        next
                    }
                    {print}
                    END {
                        if (!added) print key"="val
                    }
                ' "$MY_CNF" | sudo tee "$MY_CNF.tmp" > /dev/null && sudo mv "$MY_CNF.tmp" "$MY_CNF"
            fi
        }

        # Update or append each setting
        update_or_append "socket" "$SOCKET_VAL"
        update_or_append "port" "$PORT_VAL"
        update_or_append "bind-address" "$BIND_VAL"
        echo "MySQL configuration updated."

        # Restart mysql
        echo "Restarting MySQL..."
        sudo systemctl daemon-reload
        sudo systemctl restart mysqld.service

        # Configure proxysql to use socket and port 3306
        echo "Configuring ProxySQL to use socket & port 3306..."
        mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt='Admin> ' <<EOF
        SET mysql-interfaces='127.0.0.1:3306;/var/lib/mysql/mysql.sock';
        SAVE MYSQL VARIABLES TO DISK;
        EOF

        # Restart proxysql
        echo "Restarting ProxySQL..."
        sudo systemctl restart proxysql.service

        # Check if ProxySQL is running
        if ! systemctl is-active --quiet proxysql.service; then
            echo "ProxySQL is not running. Please check the logs for more information."
            exit 1
        fi        
        
        echo "5 seconds delay Waiting for Proxysql to finish restart..."
        sleep 5 

        # Configure proxy ADMIN settings
        echo "Configuring ProxySQL ADMIN settings..."
        mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt='Admin> ' <<EOF
        -- Set the MySQL server hostgroup
        -- This is the group of MySQL servers that ProxySQL will use
        INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,'127.0.0.1',3307);
        INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (2,'127.0.0.1',3307);
        SET mysql-server_version = '$MYSQL_VERSION';
        -- Adjust max connections per hostgroup for load balancing
        UPDATE mysql_servers SET max_connections=1000 WHERE hostgroup_id=1;
        UPDATE mysql_servers SET max_connections=2000 WHERE hostgroup_id=2;
        UPDATE global_variables SET variable_value='monitor' WHERE variable_name='mysql-monitor_username';
        UPDATE global_variables SET variable_value='monitor' WHERE variable_name='mysql-monitor_password';
        UPDATE global_variables SET variable_value='4000' WHERE variable_name IN ('mysql-monitor_connect_interval','mysql-monitor_ping_interval','mysql-monitor_read_only_interval');
        -- Disable Monitoring
        UPDATE global_variables SET variable_value='false' WHERE variable_name='mysql-monitor_enabled';
        INSERT INTO mysql_replication_hostgroups (writer_hostgroup,reader_hostgroup,comment) VALUES (1,2,'cluster1');
        -- Apply mysql variables
        LOAD MYSQL VARIABLES TO RUNTIME; 
        SAVE MYSQL VARIABLES TO DISK;
        LOAD MYSQL SERVERS TO RUNTIME; 
        SAVE MYSQL SERVERS TO DISK;
        EOF

        # Switch the unix socket
        echo "Switching the unix socket..."
        # Remove the old socket
        echo "Removing the old mysql unix socket..."
        sudo rm -f /var/lib/mysql/mysql.sock
        # Grant default ACL to the directory now proxysql can create the socket in this path
        sudo chown mysql:mysql /var/lib/mysql
        sudo chmod 775 /var/lib/mysql
        # Grant acl to proxysql user
        sudo setfacl -d -m u:proxysql:rwx /var/lib/mysql
        # Add proxysql user to mysql group
        sudo usermod -aG mysql proxysql       
        sudo systemctl restart proxysql.service
        echo "Proxysql service restarted..."
        echo "Proxysql setup complete..."
      args:      
        executable: /bin/bash

    - name: Register RestoreHook to Cpanel
      raw: |
        set -e
        echo "Adding cPanel ProxySQL Restore Sync hook..."
        [ "$(id -u)" -ne 0 ] && { echo "Run as root: sudo $0"; exit 1; }

        echo "Checking Perl modules..."
        for module in DBI JSON; do
            /usr/local/cpanel/3rdparty/bin/perl -M$module -e 1 &>/dev/null || {
                echo "Installing $module..."
                /usr/local/cpanel/3rdparty/bin/perl -MCPAN -e "CPAN::Shell->install(\"$module\")"
            }
        done
        echo "Creating module directory..."
        mkdir -p /usr/local/cpanel/Cpanel || exit 1

        echo "Enabling hooks..."
        echo "enabled" > /var/cpanel/hooks/state

        echo "Writing ProxySQL hook module..."
        cat <<'EOF' > /usr/local/cpanel/Cpanel/ProxyRestoreHook.pm
        #!/usr/bin/perl

        package Cpanel::ProxyRestoreHook;

        use strict;
        use warnings;
        use Cpanel::Logger;
        use DBI;
        use File::Path qw(make_path);
        use POSIX qw(strftime);


        # ProxySQL Configuration
        my $proxysql_admin_host = '127.0.0.1';
        my $proxysql_admin_port = '6032';
        my $proxysql_admin_user = 'admin';
        my $proxysql_admin_pass = 'admin';
        my $proxysql_admin_db   = 'admin';
        my $proxysql_default_hostgroup = 1;

        # MySQL Configuration
        my $mysql_host = '127.0.0.1';
        my $mysql_port = '3307';
        my $mysql_user = 'stnduser';
        my $mysql_pass = 'stnduser';

        # Logging configuration
        my $log_dir = '/var/log/cpanel/hooks';
        my $log_file = "$log_dir/proxy_restore.log";

        # Ensure log directory exists
        make_path($log_dir) unless -d $log_dir;

        my $logger = Cpanel::Logger->new();

        sub describe {
            return [
            {
                    'category' => 'PkgAcct',
                    'event'    => 'Restore',
                    'stage'    => 'postExtract',
                    'hook'     => 'Cpanel::ProxyRestoreHook::pre_restore',
                    'exectype' => 'module',
                },
                {
                    'category' => 'PkgAcct',
                    'event'    => 'Restore',
                    'stage'    => 'post',
                    'hook'     => 'Cpanel::ProxyRestoreHook::post_restore',
                    'exectype' => 'module',
                }
            ];
        }

        sub log_to_file {
            my ($message) = @_;
            my $timestamp = strftime("%Y-%m-%d %H:%M:%S", localtime());
            
            if (open(my $fh, '>>', $log_file)) {
                print $fh "[$timestamp] $message\n";
                close($fh);
            }
        }

        sub switch_to_mysql {
            log_to_file("Switching to direct MySQL connection");

            # Fix socket permissions
            if (-e "/var/lib/mysql/mysql.sock") {
                system("sudo chown mysql:mysql /var/lib/mysql/mysql.sock") == 0
                    or log_to_file("Failed to chown mysql.sock: $?");
                system("sudo chmod 777 /var/lib/mysql/mysql.sock") == 0
                    or log_to_file("Failed to chmod mysql.sock: $?");
            } else {
                log_to_file("MySQL socket /var/lib/mysql/mysql.sock does not exist");
            }

            # Create symlink to MySQL socket
            if (-e "/var/lib/mysql/mysql2.sock") {
                system("sudo ln -sf /var/lib/mysql/mysql2.sock /var/lib/mysql/mysql.sock") == 0
                    or log_to_file("Failed to create symlink for mysql.sock: $?");
            } else {
                log_to_file("MySQL socket /var/lib/mysql/mysql2.sock does not exist");
            }

            # Redirect traffic from port 3306 to 3307
            system("sudo iptables -t nat -A PREROUTING -p tcp --dport 3306 -j REDIRECT --to-ports 3307") == 0
                or log_to_file("Failed to redirect PREROUTING 3306 to 3307: $?");
            system("sudo iptables -t nat -A OUTPUT -p tcp --dport 3306 -j REDIRECT --to-ports 3307") == 0
                or log_to_file("Failed to redirect OUTPUT 3306 to 3307: $?");
        }

        sub revert_to_proxysql {
        log_to_file("Reverting to ProxySQL operation");

            # Restore socket ownership to Proxysql
            if (-e "/var/lib/mysql/mysql.sock") {
                system("sudo chown proxysql:proxysql /var/lib/mysql/mysql.sock") == 0
                    or log_to_file("Failed to chown mysql.sock to proxysql: $?");
            }

            # Remove symlink
            if (-l "/var/lib/mysql/mysql.sock") {
                system("sudo unlink /var/lib/mysql/mysql.sock") == 0
                    or log_to_file("Failed to unlink mysql.sock: $?");
            }

        # Restore socket ownership
            if (-e "/var/lib/mysql/mysql2.sock") {
                system("sudo chown mysql:mysql /var/lib/mysql/mysql2.sock") == 0
                    or log_to_file("Failed to chown mysql2.sock to mysql: $?");
                system("sudo chmod 777 /var/lib/mysql/mysql2.sock") == 0
                    or log_to_file("Failed to update permissions for mysql2.sock to 777 $?");
            }

            # Restart ProxySQL
            system("sudo systemctl restart proxysql") == 0
                or log_to_file("Failed to restart ProxySQL: $?");
            
            # Remove port redirections
            system("sudo iptables -t nat -D PREROUTING -p tcp --dport 3306 -j REDIRECT --to-ports 3307") == 0
                or log_to_file("Failed to remove PREROUTING redirection: $?");
            system("sudo iptables -t nat -D OUTPUT -p tcp --dport 3306 -j REDIRECT --to-ports 3307") == 0
                or log_to_file("Failed to remove OUTPUT redirection: $?");

        }

        sub pre_restore {
            my ($context, $data) = @_;
        log_to_file("Starting pre-restore actions for restorepkg");
            switch_to_mysql();
        log_to_file("Switch to MySQL complete");
        }

        sub post_restore {
            my ($context, $data) = @_;
        log_to_file("Starting post-restore actions for restorepkg");
            _sync_all_mysql_users();
        log_to_file("ProxySQL user sync complete");
            revert_to_proxysql();
        log_to_file("ProxySQL operation restored");
        }

        sub _sync_all_mysql_users {
            log_to_file("Starting MySQL to ProxySQL user synchronization (localhost only)");

            # Connect to MySQL
            my $mysql_dsn = "DBI:mysql:database=mysql;host=$mysql_host;port=$mysql_port";
            my $mysql_dbh = DBI->connect($mysql_dsn, $mysql_user, $mysql_pass, {
                RaiseError => 0,
                AutoCommit => 1,
                PrintError => 0
            }) or do {
                log_to_file("Cannot connect to MySQL: $DBI::errstr");
                return;
            };
            
            # Connect to ProxySQL
            my $proxysql_dsn = "DBI:mysql:database=$proxysql_admin_db;host=$proxysql_admin_host;port=$proxysql_admin_port";
            my $proxysql_dbh = DBI->connect($proxysql_dsn, $proxysql_admin_user, $proxysql_admin_pass, {
                RaiseError => 0,
                AutoCommit => 1,
                PrintError => 0
            }) or do {
                log_to_file("Cannot connect to ProxySQL: $DBI::errstr");
                $mysql_dbh->disconnect() if $mysql_dbh;
                return;
            };
            
            my $user_query = q{
                SELECT User, authentication_string 
                FROM mysql.user 
                WHERE Host = 'localhost'
                AND authentication_string != ''
                AND authentication_string IS NOT NULL
            };
            
            my $sth = $mysql_dbh->prepare($user_query);
            unless ($sth && $sth->execute()) {
                my $error = $mysql_dbh->errstr || "Unknown error";
                log_to_file("Failed to query MySQL users: $error");
                $mysql_dbh->disconnect();
                $proxysql_dbh->disconnect();
                return;
            }

            # Prepare statement once for efficiency
            my $user_stmt = $proxysql_dbh->prepare(
                q{INSERT INTO mysql_users 
                (username, password, default_hostgroup, active) 
                VALUES (?, ?, ?, 1)
                ON DUPLICATE KEY UPDATE 
                    password = VALUES(password),
                    default_hostgroup = VALUES(default_hostgroup),
                    active = 1}
            ) or do {
                log_to_file("Failed to prepare ProxySQL statement: " . $proxysql_dbh->errstr);
                $sth->finish();
                $mysql_dbh->disconnect();
                $proxysql_dbh->disconnect();
                return;
            };

            my ($synced_count, $error_count) = (0, 0);
            
            while (my ($username, $password_hash) = $sth->fetchrow_array()) {
                next unless $username && $password_hash;
                
                eval {
                    $user_stmt->execute($username, $password_hash, $proxysql_default_hostgroup);
                    $synced_count++;
                };
                if ($@) {
                    log_to_file("Failed to sync user $username: $@");
                    $error_count++;
                }
            }
            $sth->finish();
            
            log_to_file("Synced $synced_count localhost users ($error_count errors)");
            
            # Apply ProxySQL changes
            my ($runtime_ok, $disk_ok) = (1, 1);
            
            eval {
                $proxysql_dbh->do("LOAD MYSQL USERS TO RUNTIME");
                log_to_file("Loaded users to runtime");
            } or do {
                log_to_file("LOAD MYSQL USERS TO RUNTIME failed: $@");
                $runtime_ok = 0;
            };
            
            eval {
                $proxysql_dbh->do("SAVE MYSQL USERS TO DISK");
                log_to_file("Saved users to disk");
            } or do {
                log_to_file("SAVE MYSQL USERS TO DISK failed: $@");
                $disk_ok = 0;
            };
            
            # Cleanup resources
            $user_stmt->finish() if $user_stmt;
            $mysql_dbh->disconnect();
            $proxysql_dbh->disconnect();
            
            if ($runtime_ok && $disk_ok) {
                log_to_file("User synchronization completed successfully");
                return 1;
            }
            
            log_to_file("User synchronization completed with errors");
            return 0;
        }

        1;
        EOF
        echo "Validating syntax..."
        /usr/local/cpanel/3rdparty/bin/perl -c /usr/local/cpanel/Cpanel/ProxyRestoreHook.pm || exit 1

        echo "Registering hook..."
        /usr/local/cpanel/bin/manage_hooks add module Cpanel::ProxyRestoreHook

        echo "Verifying..."
        /usr/local/cpanel/bin/manage_hooks list | grep -q ProxyRestoreHook && \
        echo "Success!" || echo "Installation failed!"
      args:
        executable: /bin/bash